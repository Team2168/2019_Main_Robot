package org.team2168.robot.subsystems;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.PWMSpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 * An example subsystem.  You can replace me with your own Subsystem.
 */
public class CargoIntake extends Subsystem {
	// Put methods for controlling this subsystem
    // here. Call these from Commands.
    /**
     * Positive value moves cargo inwards?
     */
    private SpeedController cargoMotor1;
    /**
     * negative value moves cargo outwards?
     */
    private SpeedController cargoMotor2;
    /**
     * the sharp IR Sensor will detect the presence of the cargo or measure the distance from the sensor to the cargo in volts
     */
    private AnalogInput sharpIRSensor;
    /**
     * the double solenoid will extend and retract a piston to punch the ball/cargo out, koff = intake open, kon = intake closed
     */
    private DoubleSolenoid punchCargoSolenoid;
    
    
	public CargoIntake() {
        cargotMotor1 = new VictorSP(RobotMap.CARGO_INTAKE_MOTOR_1);
        cargoMotor2 = new VictorSP(RobotMap.CARGO_INTAKE_MOTOR_2);
        punchCargoSolenoid = new DoubleSolenoid(RobotMap.CARGO_PUNCH_BALL_EXTENDED_PCM, RobotMap.CARGO_PUNCH_BALL_RETRACTED_PCM);
        sharpIRSensor = new AnalogInput(RobotMap.CARGO_INTAKE_SHARP_IR_SENSOR);
    }
    
    public void driveCargoMotor1(double speed)
    {
        cargoMotor1.setSpeed(speed);
    }

    public void driveCargoMotor2(double speed)
    {
        cargoMotor2.setSpeed(speed);
    }

    //drivecargo is probably useless because why would you want to move
    //cargo both inwards and outwards, but just incase we will write it
    public void driveCargo(double speed)
    {
        cargoMotor1(speed);
        cargoMotor2(speed);
    }

    public void intakeOpen(double speed)
    {
        punchCargoSolenoid.set(DoubleSolenoid.value.koff);
    }

    public void intakeClose(double speed)
    {
        punchCargoSolenoid.set(DoubleSolenoid.value.kon);
    }

    //make method for sharp ir sensor which senses distance to cargo, use volts from the lift getrawpos etc.

        
	}

	public void initDefaultCommand() {
		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}
}
